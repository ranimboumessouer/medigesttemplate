import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Subject } from 'rxjs';
import { isNil } from 'ngx-editor/utils';
import EditorCommands from './EditorCommands';
import defautlSchema from './schema';
import { parseContent } from './parsers';
import getDefaultPlugins from './defaultPlugins';
const defaultFeatures = {
    linkOnPaste: true,
    resizeImage: true,
};
const DEFAULT_OPTIONS = {
    content: null,
    history: true,
    keyboardShortcuts: true,
    inputRules: true,
    schema: defautlSchema,
    plugins: [],
    nodeViews: {},
    attributes: {},
    features: defaultFeatures,
    handleScrollToSelection: null,
    linkValidationPattern: '(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/??([^#\n\r]*)?#?([^\n\r]*)|(mailto:.*[@].*)',
};
class Editor {
    options;
    view;
    constructor(options = DEFAULT_OPTIONS) {
        this.options = { ...DEFAULT_OPTIONS, ...options };
        this.createEditor();
    }
    valueChangesSubject = new Subject();
    updateSubject = new Subject();
    get valueChanges() {
        return this.valueChangesSubject.asObservable();
    }
    get update() {
        return this.updateSubject.asObservable();
    }
    get schema() {
        return this.options.schema || defautlSchema;
    }
    get linkValidationPattern() {
        return this.options.linkValidationPattern;
    }
    get commands() {
        return new EditorCommands(this.view);
    }
    get features() {
        return { ...defaultFeatures, ...this.options.features };
    }
    handleTransactions(tr) {
        const state = this.view.state.apply(tr);
        this.view.updateState(state);
        this.updateSubject.next(this.view);
        if (!tr.docChanged && !tr.getMeta('FORCE_EMIT')) {
            return;
        }
        const json = state.doc.toJSON();
        this.valueChangesSubject.next(json);
    }
    createEditor() {
        const { options, schema } = this;
        const { content = null, nodeViews } = options;
        const { history = true, keyboardShortcuts = true, inputRules = true } = options;
        const doc = parseContent(content, schema, options.parseOptions);
        const plugins = options.plugins ?? [];
        const attributes = options.attributes ?? {};
        const defaultPlugins = getDefaultPlugins(schema, {
            history,
            keyboardShortcuts,
            inputRules,
        });
        this.view = new EditorView(null, {
            state: EditorState.create({
                doc,
                schema,
                plugins: [...defaultPlugins, ...plugins],
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            attributes,
            handleScrollToSelection: options.handleScrollToSelection,
        });
    }
    setContent(content) {
        if (isNil(content)) {
            return;
        }
        const { state } = this.view;
        const { tr, doc } = state;
        const newDoc = parseContent(content, this.schema, this.options.parseOptions);
        tr.replaceWith(0, state.doc.content.size, newDoc);
        // don't emit if both content is same
        if (doc.eq(tr.doc)) {
            return;
        }
        if (!tr.docChanged) {
            return;
        }
        this.view.dispatch(tr);
    }
    registerPlugin(plugin) {
        const { state } = this.view;
        const plugins = [...state.plugins, plugin];
        const newState = state.reconfigure({ plugins });
        this.view.updateState(newState);
    }
    destroy() {
        this.view.destroy();
    }
}
export default Editor;
//# sourceMappingURL=data:application/json;base64,
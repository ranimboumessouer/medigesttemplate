import { Component, HostListener, Input, } from '@angular/core';
import { TextColor, TextBackgroundColor } from '../MenuCommands';
import * as i0 from "@angular/core";
import * as i1 from "../menu.service";
import * as i2 from "../../../editor.service";
import * as i3 from "@angular/common";
import * as i4 from "../../../pipes/sanitize/sanitize-html.pipe";
export class ColorPickerComponent {
    el;
    menuService;
    ngxeService;
    presets;
    type;
    constructor(el, menuService, ngxeService) {
        this.el = el;
        this.menuService = menuService;
        this.ngxeService = ngxeService;
    }
    get title() {
        return this.getLabel(this.type === 'text_color' ? 'text_color' : 'background_color');
    }
    get icon() {
        return this.ngxeService.getIcon(this.type === 'text_color' ? 'text_color' : 'color_fill');
    }
    get command() {
        return this.type === 'text_color' ? TextColor : TextBackgroundColor;
    }
    updateSubscription;
    editorView;
    showPopup = false;
    isActive = false;
    activeColors = [];
    canExecute = true;
    getContrastYIQ(hexcolor) {
        const color = hexcolor.replace('#', '');
        const r = parseInt(color.substring(0, 2), 16);
        const g = parseInt(color.substring(2, 4), 16);
        const b = parseInt(color.substring(4, 6), 16);
        const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        return yiq >= 128 ? 'black' : 'white';
    }
    onDocumentClick(e) {
        if (!this.el.nativeElement.contains(e.target) && this.showPopup) {
            this.hidePopup();
        }
    }
    hidePopup() {
        this.showPopup = false;
    }
    togglePopup() {
        this.showPopup = !this.showPopup;
    }
    onTogglePopupMouseClick(e) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        this.togglePopup();
    }
    onTogglePopupKeydown() {
        this.togglePopup();
    }
    remove() {
        const { state, dispatch } = this.editorView;
        this.command.remove()(state, dispatch);
        this.hidePopup();
    }
    onRemoveMouseClick(e) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        e.preventDefault();
        this.remove();
    }
    onRemoveKeydown() {
        this.remove();
    }
    trackByIndex(index) {
        return index;
    }
    selectColor(color) {
        const { state, dispatch } = this.editorView;
        if (this.type === 'text_color') {
            const attrs = { color };
            this.command.apply(attrs)(state, dispatch);
        }
        else {
            const attrs = { backgroundColor: color };
            this.command.apply(attrs)(state, dispatch);
        }
        if (!this.editorView.hasFocus()) {
            this.editorView.focus();
        }
        this.hidePopup();
    }
    onColorSelectMouseClick(e, color) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        this.selectColor(color);
    }
    onColorSelectKeydown(color) {
        this.selectColor(color);
    }
    update = (view) => {
        const { state } = view;
        this.canExecute = this.command.canExecute(state);
        this.isActive = this.command.isActive(state);
        this.activeColors = [];
        if (this.isActive) {
            this.activeColors = this.command.getActiveColors(state);
        }
    };
    getLabel(key) {
        return this.ngxeService.locals.get(key);
    }
    ngOnInit() {
        this.editorView = this.menuService.editor.view;
        this.updateSubscription = this.menuService.editor.update.subscribe((view) => {
            this.update(view);
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ColorPickerComponent, deps: [{ token: i0.ElementRef }, { token: i1.MenuService }, { token: i2.NgxEditorService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.2", type: ColorPickerComponent, selector: "ngx-color-picker", inputs: { presets: "presets", type: "type" }, host: { listeners: { "document:mousedown": "onDocumentClick($event)" } }, ngImport: i0, template: "<button\n  type=\"button\"\n  class=\"NgxEditor__MenuItem--Icon\"\n  [class.NgxEditor__MenuItem--Active]=\"isActive || showPopup\"\n  [class.NgxEditor--Disabled]=\"!canExecute\"\n  [disabled]=\"!canExecute\"\n  [innerHTML]=\"icon | sanitizeHtml\"\n  (mousedown)=\"onTogglePopupMouseClick($event)\"\n  (keydown.enter)=\"onTogglePopupKeydown()\"\n  (keydown.space)=\"onTogglePopupKeydown()\"\n  [title]=\"title | async\"\n  [ariaLabel]=\"title | async\"\n></button>\n\n<div *ngIf=\"showPopup\" class=\"NgxEditor__Popup\">\n  <div *ngFor=\"let colorGroup of presets; trackBy: trackByIndex\" class=\"NgxEditor__ColorContainer\">\n    <button\n      class=\"NgxEditor__Color\"\n      *ngFor=\"let color of colorGroup; trackBy: trackByIndex\"\n      [ngStyle]=\"{ backgroundColor: color, color: getContrastYIQ(color) }\"\n      [title]=\"color\"\n      (mousedown)=\"onColorSelectMouseClick($event, color)\"\n      (keydown.enter)=\"onColorSelectKeydown(color)\"\n      (keydown.space)=\"onColorSelectKeydown(color)\"\n      [ngClass]=\"{ 'NgxEditor__Color--Active': activeColors.includes(color) }\"\n    ></button>\n  </div>\n\n  <button\n    class=\"NgxEditor__MenuItem--Button\"\n    (mousedown)=\"onRemoveMouseClick($event)\"\n    (keydown.enter)=\"onRemoveKeydown()\"\n    (keydown.space)=\"onRemoveKeydown()\"\n    [disabled]=\"!isActive\"\n  >\n    {{ getLabel('remove') | async }}\n  </button>\n</div>\n", styles: ["@charset \"UTF-8\";.NgxEditor__Popup{width:230px}.NgxEditor__ColorContainer{display:flex;justify-content:space-between}.NgxEditor__ColorContainer+.NgxEditor__ColorContainer{margin-top:5px}.NgxEditor__Color{border:none;outline:none;border-radius:6px;width:24px;height:24px;flex-shrink:0}.NgxEditor__Color:focus-visible{outline:1px solid var(--ngx-editor-focus-ring-color);outline-offset:1px}.NgxEditor__Color--Active:after{content:\"\\2714\";font-size:90%}.NgxEditor__MenuItem--Button{margin-top:5px}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.SanitizeHtmlPipe, name: "sanitizeHtml" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ColorPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-color-picker', template: "<button\n  type=\"button\"\n  class=\"NgxEditor__MenuItem--Icon\"\n  [class.NgxEditor__MenuItem--Active]=\"isActive || showPopup\"\n  [class.NgxEditor--Disabled]=\"!canExecute\"\n  [disabled]=\"!canExecute\"\n  [innerHTML]=\"icon | sanitizeHtml\"\n  (mousedown)=\"onTogglePopupMouseClick($event)\"\n  (keydown.enter)=\"onTogglePopupKeydown()\"\n  (keydown.space)=\"onTogglePopupKeydown()\"\n  [title]=\"title | async\"\n  [ariaLabel]=\"title | async\"\n></button>\n\n<div *ngIf=\"showPopup\" class=\"NgxEditor__Popup\">\n  <div *ngFor=\"let colorGroup of presets; trackBy: trackByIndex\" class=\"NgxEditor__ColorContainer\">\n    <button\n      class=\"NgxEditor__Color\"\n      *ngFor=\"let color of colorGroup; trackBy: trackByIndex\"\n      [ngStyle]=\"{ backgroundColor: color, color: getContrastYIQ(color) }\"\n      [title]=\"color\"\n      (mousedown)=\"onColorSelectMouseClick($event, color)\"\n      (keydown.enter)=\"onColorSelectKeydown(color)\"\n      (keydown.space)=\"onColorSelectKeydown(color)\"\n      [ngClass]=\"{ 'NgxEditor__Color--Active': activeColors.includes(color) }\"\n    ></button>\n  </div>\n\n  <button\n    class=\"NgxEditor__MenuItem--Button\"\n    (mousedown)=\"onRemoveMouseClick($event)\"\n    (keydown.enter)=\"onRemoveKeydown()\"\n    (keydown.space)=\"onRemoveKeydown()\"\n    [disabled]=\"!isActive\"\n  >\n    {{ getLabel('remove') | async }}\n  </button>\n</div>\n", styles: ["@charset \"UTF-8\";.NgxEditor__Popup{width:230px}.NgxEditor__ColorContainer{display:flex;justify-content:space-between}.NgxEditor__ColorContainer+.NgxEditor__ColorContainer{margin-top:5px}.NgxEditor__Color{border:none;outline:none;border-radius:6px;width:24px;height:24px;flex-shrink:0}.NgxEditor__Color:focus-visible{outline:1px solid var(--ngx-editor-focus-ring-color);outline-offset:1px}.NgxEditor__Color--Active:after{content:\"\\2714\";font-size:90%}.NgxEditor__MenuItem--Button{margin-top:5px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.MenuService }, { type: i2.NgxEditorService }], propDecorators: { presets: [{
                type: Input
            }], type: [{
                type: Input
            }], onDocumentClick: [{
                type: HostListener,
                args: ['document:mousedown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
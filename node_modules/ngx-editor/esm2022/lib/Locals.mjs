import { isObservable, of } from 'rxjs';
export const defaults = {
    // menu
    bold: 'Bold',
    italic: 'Italic',
    code: 'Code',
    underline: 'Underline',
    strike: 'Strike',
    blockquote: 'Blockquote',
    bullet_list: 'Bullet List',
    ordered_list: 'Ordered List',
    heading: 'Heading',
    h1: 'Header 1',
    h2: 'Header 2',
    h3: 'Header 3',
    h4: 'Header 4',
    h5: 'Header 5',
    h6: 'Header 6',
    align_left: 'Left Align',
    align_center: 'Center Align',
    align_right: 'Right Align',
    align_justify: 'Justify',
    text_color: 'Text Color',
    background_color: 'Background Color',
    horizontal_rule: 'Horizontal rule',
    format_clear: 'Clear Formatting',
    insertLink: 'Insert Link',
    removeLink: 'Remove Link',
    insertImage: 'Insert Image',
    indent: 'Increase Indent',
    outdent: 'Decrease Indent',
    superscript: 'Superscript',
    subscript: 'Subscript',
    undo: 'Undo',
    redo: 'Redo',
    // pupups, forms, others...
    url: 'URL',
    text: 'Text',
    openInNewTab: 'Open in new tab',
    insert: 'Insert',
    altText: 'Alt Text',
    title: 'Title',
    remove: 'Remove',
    enterValidUrl: 'Please enter a valid URL',
};
class Locals {
    locals = defaults;
    constructor(newLocals = {}) {
        this.locals = { ...defaults, ...newLocals };
    }
    get = (key) => {
        const value = this.locals[key];
        if (value) {
            return isObservable(value) ? value : of(value);
        }
        return of('');
    };
}
export default Locals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL0xvY2Fscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsWUFBWSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQWdEO0lBQ25FLE9BQU87SUFDUCxJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLElBQUksRUFBRSxNQUFNO0lBQ1osU0FBUyxFQUFFLFdBQVc7SUFDdEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsVUFBVSxFQUFFLFlBQVk7SUFDeEIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsYUFBYSxFQUFFLFNBQVM7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsZ0JBQWdCLEVBQUUsa0JBQWtCO0lBQ3BDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtJQUNoQyxVQUFVLEVBQUUsYUFBYTtJQUN6QixVQUFVLEVBQUUsYUFBYTtJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsU0FBUyxFQUFFLFdBQVc7SUFDdEIsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsTUFBTTtJQUVaLDJCQUEyQjtJQUMzQixHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxNQUFNO0lBQ1osWUFBWSxFQUFFLGlCQUFpQjtJQUMvQixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsVUFBVTtJQUNuQixLQUFLLEVBQUUsT0FBTztJQUNkLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLGFBQWEsRUFBRSwwQkFBMEI7Q0FDMUMsQ0FBQztBQUlGLE1BQU0sTUFBTTtJQUNWLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFFbEIsWUFBWSxZQUFzRSxFQUFFO1FBQ2xGLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxHQUFHLEdBQUcsQ0FBQyxHQUFXLEVBQXNCLEVBQUU7UUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUM7Q0FDSDtBQUVELGVBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgaXNPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPj4gPSB7XG4gIC8vIG1lbnVcbiAgYm9sZDogJ0JvbGQnLFxuICBpdGFsaWM6ICdJdGFsaWMnLFxuICBjb2RlOiAnQ29kZScsXG4gIHVuZGVybGluZTogJ1VuZGVybGluZScsXG4gIHN0cmlrZTogJ1N0cmlrZScsXG4gIGJsb2NrcXVvdGU6ICdCbG9ja3F1b3RlJyxcbiAgYnVsbGV0X2xpc3Q6ICdCdWxsZXQgTGlzdCcsXG4gIG9yZGVyZWRfbGlzdDogJ09yZGVyZWQgTGlzdCcsXG4gIGhlYWRpbmc6ICdIZWFkaW5nJyxcbiAgaDE6ICdIZWFkZXIgMScsXG4gIGgyOiAnSGVhZGVyIDInLFxuICBoMzogJ0hlYWRlciAzJyxcbiAgaDQ6ICdIZWFkZXIgNCcsXG4gIGg1OiAnSGVhZGVyIDUnLFxuICBoNjogJ0hlYWRlciA2JyxcbiAgYWxpZ25fbGVmdDogJ0xlZnQgQWxpZ24nLFxuICBhbGlnbl9jZW50ZXI6ICdDZW50ZXIgQWxpZ24nLFxuICBhbGlnbl9yaWdodDogJ1JpZ2h0IEFsaWduJyxcbiAgYWxpZ25fanVzdGlmeTogJ0p1c3RpZnknLFxuICB0ZXh0X2NvbG9yOiAnVGV4dCBDb2xvcicsXG4gIGJhY2tncm91bmRfY29sb3I6ICdCYWNrZ3JvdW5kIENvbG9yJyxcbiAgaG9yaXpvbnRhbF9ydWxlOiAnSG9yaXpvbnRhbCBydWxlJyxcbiAgZm9ybWF0X2NsZWFyOiAnQ2xlYXIgRm9ybWF0dGluZycsXG4gIGluc2VydExpbms6ICdJbnNlcnQgTGluaycsXG4gIHJlbW92ZUxpbms6ICdSZW1vdmUgTGluaycsXG4gIGluc2VydEltYWdlOiAnSW5zZXJ0IEltYWdlJyxcbiAgaW5kZW50OiAnSW5jcmVhc2UgSW5kZW50JyxcbiAgb3V0ZGVudDogJ0RlY3JlYXNlIEluZGVudCcsXG4gIHN1cGVyc2NyaXB0OiAnU3VwZXJzY3JpcHQnLFxuICBzdWJzY3JpcHQ6ICdTdWJzY3JpcHQnLFxuICB1bmRvOiAnVW5kbycsXG4gIHJlZG86ICdSZWRvJyxcblxuICAvLyBwdXB1cHMsIGZvcm1zLCBvdGhlcnMuLi5cbiAgdXJsOiAnVVJMJyxcbiAgdGV4dDogJ1RleHQnLFxuICBvcGVuSW5OZXdUYWI6ICdPcGVuIGluIG5ldyB0YWInLFxuICBpbnNlcnQ6ICdJbnNlcnQnLFxuICBhbHRUZXh0OiAnQWx0IFRleHQnLFxuICB0aXRsZTogJ1RpdGxlJyxcbiAgcmVtb3ZlOiAnUmVtb3ZlJyxcbiAgZW50ZXJWYWxpZFVybDogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIFVSTCcsXG59O1xuXG5leHBvcnQgdHlwZSBMb2NhbHNLZXlzID0ga2V5b2YgdHlwZW9mIGRlZmF1bHRzO1xuXG5jbGFzcyBMb2NhbHMge1xuICBsb2NhbHMgPSBkZWZhdWx0cztcblxuICBjb25zdHJ1Y3RvcihuZXdMb2NhbHM6IFBhcnRpYWw8UmVjb3JkPExvY2Fsc0tleXMsIHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPj4+ID0ge30pIHtcbiAgICB0aGlzLmxvY2FscyA9IHsgLi4uZGVmYXVsdHMsIC4uLm5ld0xvY2FscyB9O1xuICB9XG5cbiAgZ2V0ID0gKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMubG9jYWxzW2tleV07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYnNlcnZhYmxlKHZhbHVlKSA/IHZhbHVlIDogb2YodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gb2YoJycpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBMb2NhbHM7XG4iXX0=
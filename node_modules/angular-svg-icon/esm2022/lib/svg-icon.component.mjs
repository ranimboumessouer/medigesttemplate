import { Component, inject, ElementRef, KeyValueDiffers, Renderer2, ChangeDetectionStrategy, input, effect, signal } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
import * as i0 from "@angular/core";
class SvgIconHelper {
    constructor() {
        this.loaded = false;
    }
}
export class SvgIconComponent {
    constructor() {
        this.element = inject(ElementRef);
        this.differs = inject(KeyValueDiffers);
        this.renderer = inject(Renderer2);
        this.iconReg = inject(SvgIconRegistryService);
        this.src = input();
        this.name = input();
        this.stretch = input(false);
        this.applyClass = input(false);
        this.svgClass = input();
        this.klass = input(undefined, { alias: 'class' });
        this.viewBox = input();
        this.svgAriaLabel = input();
        this.onSVGLoaded = input();
        this.svg = signal(0);
        // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)
        this.svgStyle = input();
        this.helper = new SvgIconHelper();
        // Watch for src or name changes
        effect(() => {
            if (this.src() || this.name()) {
                this.destroy();
                this.init(this.src(), this.name());
            }
        }, { allowSignalWrites: true });
        // Watch for viewBox changes
        effect(() => {
            const viewBox = this.viewBox();
            if (!this.svg())
                return;
            this.updateViewBox(viewBox);
        });
        // Watch for style changes
        effect(() => {
            const values = this.svgStyle() || {};
            if (!this.svg())
                return;
            this.applyChanges(this.helper.differ.diff(values));
        });
        // Watch for applyClass changes
        effect(() => {
            const _ = this.svg();
            if (this.applyClass()) {
                this.setClass(this.elemSvg, null, this.klass());
            }
            else {
                this.setClass(this.elemSvg, this.klass(), null);
            }
        });
        // Watch for svgClass changes
        let previousSvgClass;
        effect(() => {
            const _ = this.svg();
            this.setClass(this.elemSvg, previousSvgClass, this.svgClass());
            previousSvgClass = this.svgClass();
        });
        // Watch for klass changes
        let previousKlass;
        effect(() => {
            const _ = this.svg();
            const elem = this.element.nativeElement;
            this.setClass(elem, previousKlass, this.klass());
            this.setClass(this.elemSvg, previousKlass, this.applyClass() ? this.klass() : null);
            previousKlass = this.klass();
        });
        // Watch for svgAriaLabel changes
        effect(() => {
            const _ = this.svg();
            this.doAria(this.svgAriaLabel());
        });
        // Watch for stretch changes
        effect(() => {
            const _ = this.svg();
            this.stylize(this.stretch());
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    get elemSvg() {
        return this.element.nativeElement.firstChild;
    }
    init(src, name) {
        if (src && name) {
            const svgObs = this.iconReg.loadSvg(src, name);
            if (svgObs) {
                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));
            }
        }
        else if (name) {
            const svgObs = this.iconReg.getSvgByName(name);
            if (svgObs) {
                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));
            }
        }
        else if (src) {
            const svgObs = this.iconReg.loadSvg(src);
            if (svgObs) {
                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));
            }
        }
        else {
            this.element.nativeElement.innerHTML = '';
            this.svg.set(0);
        }
    }
    initSvg(svg) {
        if (!this.helper.loaded && svg) {
            this.setSvg(svg);
        }
    }
    destroy() {
        this.helper.icnSub?.unsubscribe();
        this.helper = new SvgIconHelper();
        // initialize differ with empty object
        this.helper.differ = this.differs.find({}).create();
    }
    setSvg(svg) {
        if (!this.helper.loaded && svg) {
            this.helper.svg = svg;
            let icon = svg.cloneNode(true);
            const elem = this.element.nativeElement;
            const onLoadCallback = this?.onSVGLoaded();
            if (onLoadCallback) {
                icon = onLoadCallback(icon, elem);
            }
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.helper.loaded = true;
            this.copyNgContentAttribute(elem, icon);
            this.svg.update(x => x + 1);
        }
    }
    updateViewBox(viewBox) {
        if (viewBox) {
            const icon = this.elemSvg;
            if (viewBox === 'auto') {
                // Attempt to convert height & width to a viewBox.
                const w = icon.getAttribute('width');
                const h = icon.getAttribute('height');
                if (h && w) {
                    const vb = `0 0 ${w} ${h}`;
                    this.renderer.setAttribute(icon, 'viewBox', vb);
                    this.renderer.removeAttribute(icon, 'width');
                    this.renderer.removeAttribute(icon, 'height');
                }
            }
            else if (viewBox !== '') {
                this.renderer.setAttribute(icon, 'viewBox', viewBox);
                this.renderer.removeAttribute(icon, 'width');
                this.renderer.removeAttribute(icon, 'height');
            }
        }
    }
    copyNgContentAttribute(hostElem, icon) {
        const attributes = hostElem.attributes;
        const len = attributes.length;
        for (let i = 0; i < len; i += 1) {
            const attribute = attributes.item(i);
            if (attribute && attribute.name.startsWith('_ngcontent')) {
                this.setNgContentAttribute(icon, attribute.name);
                break;
            }
        }
    }
    setNgContentAttribute(parent, attributeName) {
        this.renderer.setAttribute(parent, attributeName, '');
        const len = parent.childNodes.length;
        for (let i = 0; i < len; i += 1) {
            const child = parent.childNodes[i];
            if (child instanceof Element) {
                this.setNgContentAttribute(child, attributeName);
            }
        }
    }
    stylize(stretch) {
        if (this.helper.svg) {
            const svg = this.element.nativeElement.firstChild;
            if (stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    }
    applyChanges(changes) {
        if (!changes)
            return;
        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));
        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));
        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));
    }
    setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value !== null && unit ? `${value}${unit}` : value;
        const svg = this.elemSvg;
        if (value !== null) {
            this.renderer.setStyle(svg, name, value);
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    }
    setClass(target, previous, current) {
        if (target) {
            if (previous) {
                const klasses = (Array.isArray(previous) ? previous : previous.split(' ')).filter((klass) => klass);
                for (const k of klasses) {
                    this.renderer.removeClass(target, k);
                }
            }
            if (current) {
                const klasses = (Array.isArray(current) ? current : current.split(' ')).filter((klass) => klass);
                for (const k of klasses) {
                    this.renderer.addClass(target, k);
                }
            }
        }
    }
    doAria(label) {
        if (label !== undefined) {
            const svg = this.element.nativeElement.firstChild;
            // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override
            // the SVG's aria-label.
            if (svg && !svg.hasAttribute('aria-label')) {
                if (label === '') {
                    this.renderer.setAttribute(svg, 'aria-hidden', 'true');
                    this.renderer.removeAttribute(svg, 'aria-label');
                }
                else {
                    this.renderer.removeAttribute(svg, 'aria-hidden');
                    this.renderer.setAttribute(svg, 'aria-label', label);
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SvgIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.13", type: SvgIconComponent, isStandalone: true, selector: "svg-icon", inputs: { src: { classPropertyName: "src", publicName: "src", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, stretch: { classPropertyName: "stretch", publicName: "stretch", isSignal: true, isRequired: false, transformFunction: null }, applyClass: { classPropertyName: "applyClass", publicName: "applyClass", isSignal: true, isRequired: false, transformFunction: null }, svgClass: { classPropertyName: "svgClass", publicName: "svgClass", isSignal: true, isRequired: false, transformFunction: null }, klass: { classPropertyName: "klass", publicName: "class", isSignal: true, isRequired: false, transformFunction: null }, viewBox: { classPropertyName: "viewBox", publicName: "viewBox", isSignal: true, isRequired: false, transformFunction: null }, svgAriaLabel: { classPropertyName: "svgAriaLabel", publicName: "svgAriaLabel", isSignal: true, isRequired: false, transformFunction: null }, onSVGLoaded: { classPropertyName: "onSVGLoaded", publicName: "onSVGLoaded", isSignal: true, isRequired: false, transformFunction: null }, svgStyle: { classPropertyName: "svgStyle", publicName: "svgStyle", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SvgIconComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    selector: 'svg-icon',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1zdmctaWNvbi9zcmMvbGliL3N2Zy1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQW1DLGVBQWUsRUFDNUUsU0FBUyxFQUFFLHVCQUF1QixFQUM3QyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUk3QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7QUFHckUsTUFBTSxhQUFhO0lBQW5CO1FBSUMsV0FBTSxHQUFHLEtBQUssQ0FBQztJQUNoQixDQUFDO0NBQUE7QUFRRCxNQUFNLE9BQU8sZ0JBQWdCO0lBc0I1QjtRQXJCUSxZQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLFlBQU8sR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEMsYUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixZQUFPLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFakQsUUFBRyxHQUFHLEtBQUssRUFBVSxDQUFDO1FBQ3RCLFNBQUksR0FBRyxLQUFLLEVBQVUsQ0FBQztRQUN2QixZQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLGVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsYUFBUSxHQUFHLEtBQUssRUFBTyxDQUFDO1FBQ3hCLFVBQUssR0FBRyxLQUFLLENBQU0sU0FBUyxFQUFFLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDaEQsWUFBTyxHQUFHLEtBQUssRUFBVSxDQUFDO1FBQzFCLGlCQUFZLEdBQUcsS0FBSyxFQUFVLENB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QztZQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDbEQsc0ZBQXNGO1lBQ3RGLHdCQUF3QjtZQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztnQkFDNUMsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDbEQsQ0FBQztxQkFBTSxDQUFDO29CQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztvQkFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDdEQsQ0FBQztZQUNGLENBQUM7UUFDRixDQUFDO0lBQ0YsQ0FBQzsrR0FuUVUsZ0JBQWdCO21HQUFoQixnQkFBZ0IsMjBDQUhsQiwyQkFBMkI7OzRGQUd6QixnQkFBZ0I7a0JBTjVCLFNBQVM7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxVQUFVO29CQUNwQixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDL0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGluamVjdCwgRWxlbWVudFJlZiwgS2V5VmFsdWVDaGFuZ2VzLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzLFxuXHRPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG5cdGlucHV0LCBlZmZlY3QsIHNpZ25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBTdmdJY29uUmVnaXN0cnlTZXJ2aWNlIH0gZnJvbSAnLi9zdmctaWNvbi1yZWdpc3RyeS5zZXJ2aWNlJztcblxuXG5jbGFzcyBTdmdJY29uSGVscGVyIHtcblx0c3ZnITogU1ZHRWxlbWVudDtcblx0aWNuU3ViITogU3Vic2NyaXB0aW9uO1xuXHRkaWZmZXI/OiBLZXlWYWx1ZURpZmZlcjxzdHJpbmcsIHN0cmluZ3xudW1iZXI+O1xuXHRsb2FkZWQgPSBmYWxzZTtcbn1cblxuQENvbXBvbmVudCh7XG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHNlbGVjdG9yOiAnc3ZnLWljb24nLFxuXHR0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTdmdJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcblx0cHJpdmF0ZSBlbGVtZW50ID0gaW5qZWN0KEVsZW1lbnRSZWYpO1xuXHRwcml2YXRlIGRpZmZlcnMgPSBpbmplY3QoS2V5VmFsdWVEaWZmZXJzKTtcblx0cHJpdmF0ZSByZW5kZXJlciA9IGluamVjdChSZW5kZXJlcjIpO1xuXHRwcml2YXRlIGljb25SZWcgPSBpbmplY3QoU3ZnSWNvblJlZ2lzdHJ5U2VydmljZSk7XG5cblx0c3JjID0gaW5wdXQ8c3RyaW5nPigpO1xuXHRuYW1lID0gaW5wdXQ8c3RyaW5nPigpO1xuXHRzdHJldGNoID0gaW5wdXQoZmFsc2UpO1xuXHRhcHBseUNsYXNzID0gaW5wdXQoZmFsc2UpO1xuXHRzdmdDbGFzcyA9IGlucHV0PGFueT4oKTtcblx0a2xhc3MgPSBpbnB1dDxhbnk+KHVuZGVmaW5lZCwge2FsaWFzOiAnY2xhc3MnfSk7XG5cdHZpZXdCb3ggPSBpbnB1dDxzdHJpbmc+KCk7XG5cdHN2Z0FyaWFMYWJlbCA9IGlucHV0PHN0cmluZz4oKTtcblx0b25TVkdMb2FkZWQgPSBpbnB1dDwoc3ZnOiBTVkdFbGVtZW50LCBwYXJlbnQ6IEhUTUxFbGVtZW50KSA9PiBTVkdFbGVtZW50PigpO1xuXHRzdmcgPSBzaWduYWwoMCk7XG5cblx0Ly8gQWRhcHRlZCBmcm9tIG5nU3R5bGUgKHNlZTogIGFuZ3VsYXIvcGFja2FnZXMvY29tbW9uL3NyYy9kaXJlY3RpdmVzL25nX3N0eWxlLnRzKVxuXHRzdmdTdHlsZSA9IGlucHV0PHtba2xhc3M6IHN0cmluZ106IGFueSB9fG51bGw+KCk7XG5cblx0cHJpdmF0ZSBoZWxwZXIgPSBuZXcgU3ZnSWNvbkhlbHBlcigpO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIFdhdGNoIGZvciBzcmMgb3IgbmFtZSBjaGFuZ2VzXG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdGlmICh0aGlzLnNyYygpIHx8IHRoaXMubmFtZSgpKSB7XG5cdFx0XHRcdHRoaXMuZGVzdHJveSgpO1xuXHRcdFx0XHR0aGlzLmluaXQodGhpcy5zcmMoKSwgdGhpcy5uYW1lKCkpO1xuXHRcdFx0fVxuXHRcdH0sIHthbGxvd1NpZ25hbFdyaXRlczogdHJ1ZX0pO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIHZpZXdCb3ggY2hhbmdlc1xuXHRcdGVmZmVjdCgoKSA9PiB7XG5cdFx0XHRjb25zdCB2aWV3Qm94ID0gdGhpcy52aWV3Qm94KCk7XG5cdFx0XHRpZiAoIXRoaXMuc3ZnKCkpIHJldHVybjtcblxuXHRcdFx0dGhpcy51cGRhdGVWaWV3Qm94KHZpZXdCb3gpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIHN0eWxlIGNoYW5nZXNcblx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWVzID0gdGhpcy5zdmdTdHlsZSgpIHx8IHt9O1xuXHRcdFx0aWYgKCF0aGlzLnN2ZygpKSByZXR1cm47XG5cdFx0XHR0aGlzLmFwcGx5Q2hhbmdlcyh0aGlzLmhlbHBlci5kaWZmZXIhLmRpZmYodmFsdWVzKSEpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGFwcGx5Q2xhc3MgY2hhbmdlc1xuXHRcdGVmZmVjdCgoKSA9PiB7XG5cdFx0XHRjb25zdCBfID0gdGhpcy5zdmcoKTtcblx0XHRcdGlmICh0aGlzLmFwcGx5Q2xhc3MoKSkge1xuXHRcdFx0XHR0aGlzLnNldENsYXNzKHRoaXMuZWxlbVN2ZywgbnVsbCwgdGhpcy5rbGFzcygpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2V0Q2xhc3ModGhpcy5lbGVtU3ZnLCB0aGlzLmtsYXNzKCksIG51bGwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIHN2Z0NsYXNzIGNoYW5nZXNcblx0XHRsZXQgcHJldmlvdXNTdmdDbGFzczogc3RyaW5nfHN0cmluZ1tdfG51bGw7XG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdGNvbnN0IF8gPSB0aGlzLnN2ZygpO1xuXHRcdFx0dGhpcy5zZXRDbGFzcyh0aGlzLmVsZW1TdmcsIHByZXZpb3VzU3ZnQ2xhc3MsIHRoaXMuc3ZnQ2xhc3MoKSk7XG5cdFx0XHRwcmV2aW91c1N2Z0NsYXNzID0gdGhpcy5zdmdDbGFzcygpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGtsYXNzIGNoYW5nZXNcblx0XHRsZXQgcHJldmlvdXNLbGFzczogc3RyaW5nfHN0cmluZ1tdfG51bGw7XG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdGNvbnN0IF8gPSB0aGlzLnN2ZygpO1xuXHRcdFx0Y29uc3QgZWxlbSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuXHRcdFx0dGhpcy5zZXRDbGFzcyhlbGVtLCBwcmV2aW91c0tsYXNzLCB0aGlzLmtsYXNzKCkpO1xuXG5cdFx0XHR0aGlzLnNldENsYXNzKHRoaXMuZWxlbVN2ZywgcHJldmlvdXNLbGFzcywgdGhpcy5hcHBseUNsYXNzKCkgPyB0aGlzLmtsYXNzKCkgOiBudWxsKTtcblx0XHRcdHByZXZpb3VzS2xhc3MgPSB0aGlzLmtsYXNzKCk7XG5cdFx0fSk7XG5cblx0XHQvLyBXYXRjaCBmb3Igc3ZnQXJpYUxhYmVsIGNoYW5nZXNcblx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0Y29uc3QgXyA9IHRoaXMuc3ZnKCk7XG5cdFx0XHR0aGlzLmRvQXJpYSh0aGlzLnN2Z0FyaWFMYWJlbCgpISk7XG5cdFx0fSk7XG5cblx0XHQvLyBXYXRjaCBmb3Igc3RyZXRjaCBjaGFuZ2VzXG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdGNvbnN0IF8gPSB0aGlzLnN2ZygpO1xuXHRcdFx0dGhpcy5zdHlsaXplKHRoaXMuc3RyZXRjaCgpKTtcblx0XHR9KTtcblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMuZGVzdHJveSgpO1xuXHR9XG5cblx0Z2V0IGVsZW1TdmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmZpcnN0Q2hpbGQ7XG5cdH1cblxuXHRwcml2YXRlIGluaXQoc3JjPzogc3RyaW5nLCBuYW1lPzogc3RyaW5nKSB7XG5cdFx0aWYgKHNyYyAmJiBuYW1lKSB7XG5cdFx0XHRjb25zdCBzdmdPYnMgPSB0aGlzLmljb25SZWcubG9hZFN2ZyhzcmMsIG5hbWUpO1xuXHRcdFx0aWYgKHN2Z09icykge1xuXHRcdFx0XHR0aGlzLmhlbHBlci5pY25TdWIgPSBzdmdPYnMuc3Vic2NyaWJlKHN2ZyA9PiB0aGlzLmluaXRTdmcoc3ZnKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChuYW1lKSB7XG5cdFx0XHRjb25zdCBzdmdPYnMgPSB0aGlzLmljb25SZWcuZ2V0U3ZnQnlOYW1lKG5hbWUpO1xuXHRcdFx0aWYgKHN2Z09icykge1xuXHRcdFx0XHR0aGlzLmhlbHBlci5pY25TdWIgPSBzdmdPYnMuc3Vic2NyaWJlKHN2ZyA9PiB0aGlzLmluaXRTdmcoc3ZnKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzcmMpIHtcblx0XHRcdGNvbnN0IHN2Z09icyA9IHRoaXMuaWNvblJlZy5sb2FkU3ZnKHNyYyk7XG5cdFx0XHRpZiAoc3ZnT2JzKSB7XG5cdFx0XHRcdHRoaXMuaGVscGVyLmljblN1YiA9IHN2Z09icy5zdWJzY3JpYmUoc3ZnID0+IHRoaXMuaW5pdFN2ZyhzdmcpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG5cdFx0XHR0aGlzLnN2Zy5zZXQoMCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBpbml0U3ZnKHN2ZzogU1ZHRWxlbWVudHx1bmRlZmluZWQpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuaGVscGVyLmxvYWRlZCAmJiBzdmcpIHtcblx0XHRcdHRoaXMuc2V0U3ZnKHN2Zyk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBkZXN0cm95KCkge1xuXHRcdHRoaXMuaGVscGVyLmljblN1Yj8udW5zdWJzY3JpYmUoKTtcblx0XHR0aGlzLmhlbHBlciA9IG5ldyBTdmdJY29uSGVscGVyKCk7XG5cdFx0Ly8gaW5pdGlhbGl6ZSBkaWZmZXIgd2l0aCBlbXB0eSBvYmplY3Rcblx0XHR0aGlzLmhlbHBlci5kaWZmZXIgPSB0aGlzLmRpZmZlcnMuZmluZCh7fSkuY3JlYXRlKCk7XG5cdH1cblxuXHRwcml2YXRlIHNldFN2Zyhzdmc6IFNWR0VsZW1lbnQpIHtcblx0XHRpZiAoIXRoaXMuaGVscGVyLmxvYWRlZCAmJiBzdmcpIHtcblx0XHRcdHRoaXMuaGVscGVyLnN2ZyA9IHN2Zztcblx0XHRcdGxldCBpY29uID0gc3ZnLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdFbGVtZW50O1xuXHRcdFx0Y29uc3QgZWxlbSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuXHRcdFx0Y29uc3Qgb25Mb2FkQ2FsbGJhY2sgPSB0aGlzPy5vblNWR0xvYWRlZCgpO1xuXHRcdFx0aWYgKG9uTG9hZENhbGxiYWNrKSB7XG5cdFx0XHRcdGljb24gPSBvbkxvYWRDYWxsYmFjayhpY29uLCBlbGVtKTtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5pbm5lckhUTUwgPSAnJztcblx0XHRcdHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoZWxlbSwgaWNvbik7XG5cdFx0XHR0aGlzLmhlbHBlci5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLmNvcHlOZ0NvbnRlbnRBdHRyaWJ1dGUoZWxlbSwgaWNvbik7XG5cblx0XHRcdHRoaXMuc3ZnLnVwZGF0ZSh4ID0+IHggKyAxKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHVwZGF0ZVZpZXdCb3godmlld0JveD86IHN0cmluZykge1xuXHRcdGlmICh2aWV3Qm94KSB7XG5cdFx0XHRjb25zdCBpY29uID0gdGhpcy5lbGVtU3ZnO1xuXHRcdFx0aWYgKHZpZXdCb3ggPT09ICdhdXRvJykge1xuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGNvbnZlcnQgaGVpZ2h0ICYgd2lkdGggdG8gYSB2aWV3Qm94LlxuXHRcdFx0XHRjb25zdCB3ID0gaWNvbi5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG5cdFx0XHRcdGNvbnN0IGggPSBpY29uLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cdFx0XHRcdGlmIChoICYmIHcpIHtcblx0XHRcdFx0XHRjb25zdCB2YiA9IGAwIDAgJHt3fSAke2h9YDtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShpY29uLCAndmlld0JveCcsIHZiKTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShpY29uLCAnd2lkdGgnKTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShpY29uLCAnaGVpZ2h0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodmlld0JveCAhPT0gJycpIHtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoaWNvbiwgJ3ZpZXdCb3gnLCB2aWV3Qm94ISk7XG5cdFx0XHRcdHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGljb24sICd3aWR0aCcpO1xuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShpY29uLCAnaGVpZ2h0Jyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBjb3B5TmdDb250ZW50QXR0cmlidXRlKGhvc3RFbGVtOiBhbnksIGljb246IFNWR0VsZW1lbnQpIHtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gaG9zdEVsZW0uYXR0cmlidXRlcyBhcyBOYW1lZE5vZGVNYXA7XG5cdFx0Y29uc3QgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlcy5pdGVtKGkpO1xuXHRcdFx0aWYgKGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUubmFtZS5zdGFydHNXaXRoKCdfbmdjb250ZW50JykpIHtcblx0XHRcdFx0dGhpcy5zZXROZ0NvbnRlbnRBdHRyaWJ1dGUoaWNvbiwgYXR0cmlidXRlLm5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHNldE5nQ29udGVudEF0dHJpYnV0ZShwYXJlbnQ6IE5vZGUsIGF0dHJpYnV0ZU5hbWU6IHN0cmluZykge1xuXHRcdHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHBhcmVudCwgYXR0cmlidXRlTmFtZSwgJycpO1xuXHRcdGNvbnN0IGxlbiA9IHBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdFx0XHRjb25zdCBjaGlsZCA9IHBhcmVudC5jaGlsZE5vZGVzW2ldO1xuXHRcdFx0aWYgKGNoaWxkIGluc3RhbmNlb2YgRWxlbWVudCkge1xuXHRcdFx0XHR0aGlzLnNldE5nQ29udGVudEF0dHJpYnV0ZShjaGlsZCwgYXR0cmlidXRlTmFtZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzdHlsaXplKHN0cmV0Y2g6IGJvb2xlYW4pIHtcblx0XHRpZiAodGhpcy5oZWxwZXIuc3ZnKSB7XG5cdFx0XHRjb25zdCBzdmcgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoc3RyZXRjaCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShzdmcsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ25vbmUnKTtcblx0XHRcdH0gZWxzZSBpZiAoc3RyZXRjaCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoc3ZnLCAncHJlc2VydmVBc3BlY3RSYXRpbycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXBwbHlDaGFuZ2VzKGNoYW5nZXM6IEtleVZhbHVlQ2hhbmdlczxzdHJpbmcsIHN0cmluZ3xudW1iZXI+KSB7XG5cdFx0aWYgKCFjaGFuZ2VzKSByZXR1cm47XG5cblx0XHRjaGFuZ2VzLmZvckVhY2hSZW1vdmVkSXRlbSgocmVjb3JkKSA9PiB0aGlzLnNldFN0eWxlKHJlY29yZC5rZXksIG51bGwpKTtcblx0XHRjaGFuZ2VzLmZvckVhY2hBZGRlZEl0ZW0oKHJlY29yZCkgPT4gdGhpcy5zZXRTdHlsZShyZWNvcmQua2V5LCByZWNvcmQuY3VycmVudFZhbHVlKSk7XG5cdFx0Y2hhbmdlcy5mb3JFYWNoQ2hhbmdlZEl0ZW0oKHJlY29yZCkgPT4gdGhpcy5zZXRTdHlsZShyZWNvcmQua2V5LCByZWNvcmQuY3VycmVudFZhbHVlKSk7XG5cdH1cblxuXHRwcml2YXRlIHNldFN0eWxlKG5hbWVBbmRVbml0OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkKSB7XG5cdFx0Y29uc3QgW25hbWUsIHVuaXRdID0gbmFtZUFuZFVuaXQuc3BsaXQoJy4nKTtcblx0XHR2YWx1ZSA9IHZhbHVlICE9PSBudWxsICYmIHVuaXQgPyBgJHt2YWx1ZX0ke3VuaXR9YCA6IHZhbHVlO1xuXHRcdGNvbnN0IHN2ZyA9IHRoaXMuZWxlbVN2ZztcblxuXHRcdGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yZW5kZXJlci5zZXRTdHlsZShzdmcsIG5hbWUsIHZhbHVlIGFzIHN0cmluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUoc3ZnLCBuYW1lKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHNldENsYXNzKHRhcmdldDogSFRNTEVsZW1lbnR8U1ZHU1ZHRWxlbWVudCwgcHJldmlvdXM6IHN0cmluZ3xzdHJpbmdbXXxudWxsLCBjdXJyZW50OiBzdHJpbmd8c3RyaW5nW118bnVsbCkge1xuXHRcdGlmICh0YXJnZXQpIHtcblx0XHRcdGlmIChwcmV2aW91cykge1xuXHRcdFx0XHRjb25zdCBrbGFzc2VzID0gKEFycmF5LmlzQXJyYXkocHJldmlvdXMpID8gcHJldmlvdXMgOiBwcmV2aW91cy5zcGxpdCgnICcpKS5maWx0ZXIoKGtsYXNzKSA9PiBrbGFzcyk7XG5cdFx0XHRcdGZvciAoY29uc3QgayBvZiBrbGFzc2VzKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0YXJnZXQsIGspO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoY3VycmVudCkge1xuXHRcdFx0XHRjb25zdCBrbGFzc2VzID0gKEFycmF5LmlzQXJyYXkoY3VycmVudCkgPyBjdXJyZW50IDogY3VycmVudC5zcGxpdCgnICcpKS5maWx0ZXIoKGtsYXNzKSA9PiBrbGFzcyk7XG5cdFx0XHRcdGZvciAoY29uc3QgayBvZiBrbGFzc2VzKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0YXJnZXQsIGspO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBkb0FyaWEobGFiZWw6IHN0cmluZykge1xuICAgIGlmIChsYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gIFx0XHRjb25zdCBzdmcgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5maXJzdENoaWxkO1xuXHQgIFx0Ly8gSWYgdGhlcmUgaXMgbm90IGEgc3ZnQXJpYUxhYmVsIGFuZCB0aGUgU1ZHIGhhcyBhbiBhcmlhbC1sYWJlbCwgdGhlbiBkbyBub3Qgb3ZlcnJpZGVcblx0XHQgIC8vIHRoZSBTVkcncyBhcmlhLWxhYmVsLlxuXHRcdCAgaWYgKHN2ZyAmJiAhc3ZnLmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG5cdFx0XHQgIGlmIChsYWJlbCA9PT0gJycpIHtcblx0XHRcdFx0ICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShzdmcsICdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdFx0XHRcdCAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoc3ZnLCAnYXJpYS1sYWJlbCcpO1xuXHRcdFx0ICB9IGVsc2Uge1xuXHRcdFx0ICBcdHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHN2ZywgJ2FyaWEtaGlkZGVuJyk7XG5cdFx0XHQgIFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnLCAnYXJpYS1sYWJlbCcsIGxhYmVsKTtcblx0XHRcdCAgfVxuXHRcdCAgfVxuXHQgIH1cbiAgfVxufVxuIl19
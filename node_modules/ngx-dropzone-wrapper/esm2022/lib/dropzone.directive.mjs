import { Dropzone } from "dropzone";
import { PLATFORM_ID } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import { Inject, Optional, Directive, Input, Output, EventEmitter, } from "@angular/core";
import { DROPZONE_CONFIG, DropzoneConfig, DropzoneEvents, } from "./dropzone.interfaces";
import * as i0 from "@angular/core";
export class DropzoneDirective {
    zone;
    renderer;
    elementRef;
    differs;
    platformId;
    defaults;
    instance;
    configDiff = null;
    disabled = false;
    config;
    DZ_INIT = new EventEmitter();
    DZ_ERROR = new EventEmitter();
    DZ_SUCCESS = new EventEmitter();
    DZ_SENDING = new EventEmitter();
    DZ_CANCELED = new EventEmitter();
    DZ_COMPLETE = new EventEmitter();
    DZ_PROCESSING = new EventEmitter();
    DZ_DROP = new EventEmitter();
    DZ_DRAGSTART = new EventEmitter();
    DZ_DRAGEND = new EventEmitter();
    DZ_DRAGENTER = new EventEmitter();
    DZ_DRAGOVER = new EventEmitter();
    DZ_DRAGLEAVE = new EventEmitter();
    DZ_THUMBNAIL = new EventEmitter();
    DZ_ADDEDFILE = new EventEmitter();
    DZ_ADDEDFILES = new EventEmitter();
    DZ_REMOVEDFILE = new EventEmitter();
    DZ_UPLOADPROGRESS = new EventEmitter();
    DZ_MAXFILESREACHED = new EventEmitter();
    DZ_MAXFILESEXCEEDED = new EventEmitter();
    DZ_ERRORMULTIPLE = new EventEmitter();
    DZ_SUCCESSMULTIPLE = new EventEmitter();
    DZ_SENDINGMULTIPLE = new EventEmitter();
    DZ_CANCELEDMULTIPLE = new EventEmitter();
    DZ_COMPLETEMULTIPLE = new EventEmitter();
    DZ_PROCESSINGMULTIPLE = new EventEmitter();
    DZ_RESET = new EventEmitter();
    DZ_QUEUECOMPLETE = new EventEmitter();
    DZ_TOTALUPLOADPROGRESS = new EventEmitter();
    constructor(zone, renderer, elementRef, differs, platformId, defaults) {
        this.zone = zone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.differs = differs;
        this.platformId = platformId;
        this.defaults = defaults;
        const dz = Dropzone;
        dz.autoDiscover = false;
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new DropzoneConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.renderer.addClass(this.elementRef.nativeElement, params.maxFiles === 1 ? "dz-single" : "dz-multiple");
        this.renderer.removeClass(this.elementRef.nativeElement, params.maxFiles === 1 ? "dz-multiple" : "dz-single");
        Object.keys(params).forEach(key => params[key] === undefined && delete params[key]);
        this.zone.runOutsideAngular(() => {
            this.instance = new Dropzone(this.elementRef.nativeElement, params);
        });
        if (this.disabled) {
            this.instance.disable();
        }
        if (this.DZ_INIT.observers.length) {
            this.zone.run(() => {
                this.DZ_INIT.emit(this.instance);
            });
        }
        // Add auto reset handling for events
        this.instance.on("success", () => {
            if (params.autoReset != null) {
                setTimeout(() => this.reset(), params.autoReset);
            }
        });
        this.instance.on("error", () => {
            if (params.errorReset != null) {
                setTimeout(() => this.reset(), params.errorReset);
            }
        });
        this.instance.on("canceled", () => {
            if (params.cancelReset != null) {
                setTimeout(() => this.reset(), params.cancelReset);
            }
        });
        // Add native Dropzone event handling
        DropzoneEvents.forEach((eventName) => {
            this.instance.on(eventName.toLowerCase(), (...args) => {
                args = args.length === 1 ? args[0] : args;
                const output = `DZ_${eventName.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length > 0) {
                    this.zone.run(() => {
                        emitter.emit(args);
                    });
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy();
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (!this.disabled && this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes && this.instance) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes["disabled"]) {
            if (changes["disabled"].currentValue !== changes["disabled"].previousValue) {
                if (changes["disabled"].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.enable();
                    });
                }
                else if (changes["disabled"].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.instance.disable();
                    });
                }
            }
        }
    }
    dropzone() {
        return this.instance;
    }
    reset(cancel) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.removeAllFiles(cancel);
            });
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: DropzoneDirective, deps: [{ token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: PLATFORM_ID }, { token: DROPZONE_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.11", type: DropzoneDirective, selector: "[dropzone]", inputs: { disabled: "disabled", config: ["dropzone", "config"] }, outputs: { DZ_INIT: "init", DZ_ERROR: "error", DZ_SUCCESS: "success", DZ_SENDING: "sending", DZ_CANCELED: "canceled", DZ_COMPLETE: "complete", DZ_PROCESSING: "processing", DZ_DROP: "drop", DZ_DRAGSTART: "dragStart", DZ_DRAGEND: "dragEnd", DZ_DRAGENTER: "dragEnter", DZ_DRAGOVER: "dragOver", DZ_DRAGLEAVE: "dragLeave", DZ_THUMBNAIL: "thumbnail", DZ_ADDEDFILE: "addedFile", DZ_ADDEDFILES: "addedFiles", DZ_REMOVEDFILE: "removedFile", DZ_UPLOADPROGRESS: "uploadProgress", DZ_MAXFILESREACHED: "maxFilesReached", DZ_MAXFILESEXCEEDED: "maxFilesExceeded", DZ_ERRORMULTIPLE: "errorMultiple", DZ_SUCCESSMULTIPLE: "successMultiple", DZ_SENDINGMULTIPLE: "sendingMultiple", DZ_CANCELEDMULTIPLE: "canceledMultiple", DZ_COMPLETEMULTIPLE: "completeMultiple", DZ_PROCESSINGMULTIPLE: "processingMultiple", DZ_RESET: "reset", DZ_QUEUECOMPLETE: "queueComplete", DZ_TOTALUPLOADPROGRESS: "totalUploadProgress" }, exportAs: ["ngxDropzone"], usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: DropzoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[dropzone]",
                    exportAs: "ngxDropzone",
                }]
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DROPZONE_CONFIG]
                }] }], propDecorators: { disabled: [{
                type: Input
            }], config: [{
                type: Input,
                args: ["dropzone"]
            }], DZ_INIT: [{
                type: Output,
                args: ["init"]
            }], DZ_ERROR: [{
                type: Output,
                args: ["error"]
            }], DZ_SUCCESS: [{
                type: Output,
                args: ["success"]
            }], DZ_SENDING: [{
                type: Output,
                args: ["sending"]
            }], DZ_CANCELED: [{
                type: Output,
                args: ["canceled"]
            }], DZ_COMPLETE: [{
                type: Output,
                args: ["complete"]
            }], DZ_PROCESSING: [{
                type: Output,
                args: ["processing"]
            }], DZ_DROP: [{
                type: Output,
                args: ["drop"]
            }], DZ_DRAGSTART: [{
                type: Output,
                args: ["dragStart"]
            }], DZ_DRAGEND: [{
                type: Output,
                args: ["dragEnd"]
            }], DZ_DRAGENTER: [{
                type: Output,
                args: ["dragEnter"]
            }], DZ_DRAGOVER: [{
                type: Output,
                args: ["dragOver"]
            }], DZ_DRAGLEAVE: [{
                type: Output,
                args: ["dragLeave"]
            }], DZ_THUMBNAIL: [{
                type: Output,
                args: ["thumbnail"]
            }], DZ_ADDEDFILE: [{
                type: Output,
                args: ["addedFile"]
            }], DZ_ADDEDFILES: [{
                type: Output,
                args: ["addedFiles"]
            }], DZ_REMOVEDFILE: [{
                type: Output,
                args: ["removedFile"]
            }], DZ_UPLOADPROGRESS: [{
                type: Output,
                args: ["uploadProgress"]
            }], DZ_MAXFILESREACHED: [{
                type: Output,
                args: ["maxFilesReached"]
            }], DZ_MAXFILESEXCEEDED: [{
                type: Output,
                args: ["maxFilesExceeded"]
            }], DZ_ERRORMULTIPLE: [{
                type: Output,
                args: ["errorMultiple"]
            }], DZ_SUCCESSMULTIPLE: [{
                type: Output,
                args: ["successMultiple"]
            }], DZ_SENDINGMULTIPLE: [{
                type: Output,
                args: ["sendingMultiple"]
            }], DZ_CANCELEDMULTIPLE: [{
                type: Output,
                args: ["canceledMultiple"]
            }], DZ_COMPLETEMULTIPLE: [{
                type: Output,
                args: ["completeMultiple"]
            }], DZ_PROCESSINGMULTIPLE: [{
                type: Output,
                args: ["processingMultiple"]
            }], DZ_RESET: [{
                type: Output,
                args: ["reset"]
            }], DZ_QUEUECOMPLETE: [{
                type: Output,
                args: ["queueComplete"]
            }], DZ_TOTALUPLOADPROGRESS: [{
                type: Output,
                args: ["totalUploadProgress"]
            }] } });
//# sourceMappingURL=data:application/json;base64,